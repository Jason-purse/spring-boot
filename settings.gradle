// 参考 https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#MPm02
pluginManagement {
	repositories {
		mavenLocal()

		// 同样尝试从 阿里云 maven 仓库中获取 ...
		maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
		maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
		mavenCentral()
		gradlePluginPortal()
		maven {
			url 'https://repo.spring.io/release'
		}

		// 如果当前项目的版本(查看gradle.properties 了解详情) ...
		if (version.endsWith('-SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}

	// 设定解析策略 ...
	resolutionStrategy {
		eachPlugin {

			// 根据它已经具有的插件请求(也可以说是原始的插件请求)
			// 如果是 id是 命名空间为 org.jetbrains.kotlin的 jvm插件 ...
			if (requested.id.id == "org.jetbrains.kotlin.jvm") {
				// 指定版本为
				useVersion "${kotlinVersion}"
			}
			if (requested.id.id == "org.jetbrains.kotlin.plugin.spring") {
				useVersion "${kotlinVersion}"
			}
		}
	}
}

//https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#JEtNS
plugins {
	// 那么在这里使用的插件,并不是使用 ...
	// 我们应该可以在对应的构建脚本中发现没有携带版本的 插件在plugins中声明  ...
	// 默认来说,这里并没有被应用 ...(apply调用参数 默认是false)
	id "com.gradle.enterprise" version "3.6.1" apply true
//	id "io.spring.ge.conventions" version "0.0.8"
}

// 整个构建中 这个根项目的名称是 ..
rootProject.name="spring-boot-build"

// 这里为了指明,而不是project.gradle .. 那么我认为这里可能拿不到project了 ???
// 我们尝试在这里加入一个脚本插件 ...

// https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#gnpSg
// 这里使用遗留的应用脚本插件的方式进行 脚本使用 ...
apply from: 'gradle/settingProjectCheck.gradle'

// 通过Gradle 对象设置事件回调 ..
// 项目已经被配置,但是还没有被评估

// 构建扫描不关心 ...
settings.gradle.projectsLoaded {
	// 项目加载了,这里配置 gradle 构建扫描扩展脚本块 ...
	gradleEnterprise {
		// 配置构建扫描 ....
		buildScan {
			def toolchainVersion = settings.gradle.rootProject.findProperty('toolchainVersion')
			if (toolchainVersion != null) {
				value('Toolchain version', toolchainVersion)
				tag("JDK-$toolchainVersion")
			}

			settings.gradle.rootProject.getBuildDir().mkdirs()
			new File(settings.gradle.rootProject.getBuildDir(), "build-scan-uri.txt").text = "build scan not generated"

			buildScanPublished { scan ->
				new File(settings.gradle.rootProject.getBuildDir(), "build-scan-uri.txt").text = "<${scan.buildScanUri}|build scan>\n"
			}
		}
	}
}

include "spring-boot-project:spring-boot-dependencies"
include "spring-boot-project:spring-boot-parent"
include "spring-boot-project:spring-boot-tools:spring-boot-antlib"
include "spring-boot-project:spring-boot-tools:spring-boot-autoconfigure-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-buildpack-platform"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-metadata"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-test-support"
include "spring-boot-project:spring-boot-tools:spring-boot-jarmode-layertools"
include "spring-boot-project:spring-boot-tools:spring-boot-loader"
include "spring-boot-project:spring-boot-tools:spring-boot-loader-tools"
include "spring-boot-project:spring-boot-tools:spring-boot-maven-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-test-support"
include "spring-boot-project:spring-boot"
include "spring-boot-project:spring-boot-autoconfigure"
include "spring-boot-project:spring-boot-actuator"
include "spring-boot-project:spring-boot-actuator-autoconfigure"
include "spring-boot-project:spring-boot-cli"
include "spring-boot-project:spring-boot-devtools"
include "spring-boot-project:spring-boot-docs"
include "spring-boot-project:spring-boot-properties-migrator"
include "spring-boot-project:spring-boot-test"
include "spring-boot-project:spring-boot-test-autoconfigure"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-configuration-processor-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-launch-script-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-loader-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-server-tests"
include "spring-boot-system-tests:spring-boot-deployment-tests"
include "spring-boot-system-tests:spring-boot-image-tests"


// 我们可以知道 脚本都实现了 Script 接口,那么这个file可不是Project.file方法,而是脚本的Script 接口方法 ..

// 这里由于我们的项目和逻辑路径不对应,所以我们通过这种方式  包括我们想要的项目 ...
// include many projects whose project dirs do not match the logical project paths


// 这种估计才算 ... https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html # include method ...
// include many projects whose project dirs do not match the logical project paths
//file('subprojects').eachDir { dir ->
//  include([dir.name])
//  project(":${dir.name}").projectDir = dir
//}

// 当然这里应该是Spring boot 团队为了快速包括这些项目 所做了一个脚本逻辑循环 ...
file("${rootDir}/spring-boot-project/spring-boot-starters").eachDirMatch(~/spring-boot-starter.*/) {
	// 根据文件的名称进行项目包括  ...
	include "spring-boot-project:spring-boot-starters:${it.name}"
}

// 冒烟测试 项目
file("${rootDir}/spring-boot-tests/spring-boot-smoke-tests").eachDirMatch(~/spring-boot-smoke-test.*/) {
	include "spring-boot-tests:spring-boot-smoke-tests:${it.name}"
}





include 'spring-boot-other-tests'

