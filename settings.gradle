// 参考 https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#MPm02
pluginManagement {
	repositories {
		mavenLocal()
		maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
		maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
		mavenCentral()
		gradlePluginPortal()
		maven {
			url 'https://repo.spring.io/release'
		}

		// 如果当前项目的版本(查看gradle.properties 了解详情) ...
		if (version.endsWith('-SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}

	// 设定解析策略 ...
	resolutionStrategy {
		eachPlugin {

			// 根据它已经具有的插件请求(也可以说是原始的插件请求)
			// 如果是 id是 命名空间为 org.jetbrains.kotlin的 jvm插件 ...
			if (requested.id.id == "org.jetbrains.kotlin.jvm") {
				// 指定版本为
				useVersion "${kotlinVersion}"
			}
			if (requested.id.id == "org.jetbrains.kotlin.plugin.spring") {
				useVersion "${kotlinVersion}"
			}
		}
	}
}

//https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#JEtNS
plugins {
	// 那么在这里使用的插件,并不是使用 ...
	// 我们应该可以在对应的构建脚本中发现没有携带版本的 插件在plugins中声明 ...并使用 ...
	id "com.gradle.enterprise" version "3.6.1"
//	id "io.spring.ge.conventions" version "0.0.8"
}

// 整个构建中 这个根项目的名称是 ..
rootProject.name="spring-boot-build"

// 这里为了指明,而不是project.gradle .. 那么我认为这里可能拿不到project了 ???
// 我们尝试在这里加入一个脚本插件 ...

// https://www.yuque.com/gaolengdehulusi/nggog2/dyn3kp#gnpSg
// 这里使用遗留的应用脚本插件的方式进行 脚本使用 ...
apply from: 'gradle/settingProjectCheck.gradle'


settings.gradle.projectsLoaded {
	gradleEnterprise {
		buildScan {
			def toolchainVersion = settings.gradle.rootProject.findProperty('toolchainVersion')
			if (toolchainVersion != null) {
				value('Toolchain version', toolchainVersion)
				tag("JDK-$toolchainVersion")
			}

			settings.gradle.rootProject.getBuildDir().mkdirs()
			new File(settings.gradle.rootProject.getBuildDir(), "build-scan-uri.txt").text = "build scan not generated"

			buildScanPublished { scan ->
				new File(settings.gradle.rootProject.getBuildDir(), "build-scan-uri.txt").text = "<${scan.buildScanUri}|build scan>\n"
			}
		}
	}
}

include "spring-boot-project:spring-boot-dependencies"
include "spring-boot-project:spring-boot-parent"
include "spring-boot-project:spring-boot-tools:spring-boot-antlib"
include "spring-boot-project:spring-boot-tools:spring-boot-autoconfigure-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-buildpack-platform"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-metadata"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-test-support"
include "spring-boot-project:spring-boot-tools:spring-boot-jarmode-layertools"
include "spring-boot-project:spring-boot-tools:spring-boot-loader"
include "spring-boot-project:spring-boot-tools:spring-boot-loader-tools"
include "spring-boot-project:spring-boot-tools:spring-boot-maven-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-test-support"
include "spring-boot-project:spring-boot"
include "spring-boot-project:spring-boot-autoconfigure"
include "spring-boot-project:spring-boot-actuator"
include "spring-boot-project:spring-boot-actuator-autoconfigure"
include "spring-boot-project:spring-boot-cli"
include "spring-boot-project:spring-boot-devtools"
include "spring-boot-project:spring-boot-docs"
include "spring-boot-project:spring-boot-properties-migrator"
include "spring-boot-project:spring-boot-test"
include "spring-boot-project:spring-boot-test-autoconfigure"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-configuration-processor-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-launch-script-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-loader-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-server-tests"
include "spring-boot-system-tests:spring-boot-deployment-tests"
include "spring-boot-system-tests:spring-boot-image-tests"

file("${rootDir}/spring-boot-project/spring-boot-starters").eachDirMatch(~/spring-boot-starter.*/) {
	include "spring-boot-project:spring-boot-starters:${it.name}"
}

file("${rootDir}/spring-boot-tests/spring-boot-smoke-tests").eachDirMatch(~/spring-boot-smoke-test.*/) {
	include "spring-boot-tests:spring-boot-smoke-tests:${it.name}"
}

include 'spring-boot-other-tests'

